Seventh Pull Request Notes
11/6/2018

Added two more tests. One to the BadSetup class which checks if index out of range exception is handled when attempting to press
button that does not exist. One more test for GoodCoin which checks if the vending machine still works with unusual coin denominations.

----

Sixth Pull Request Notes
10/30/2018

Added two more tests to "GoodPath" class. Checked for correct values for the vending machine contents and delivery.
First test checks the values with change is delivered.
Second test checks if the values stay the same when a selection is made and the user does not have sufficient funds.

----

Fifth Pull Request Notes
10/23/2018

I created another test class called "GoodPath" focused more on correct values for the vending machine contents and delivery.
I initialized a vending machine with some values that will be used for the test methods.
The first test to start off was to check after a selection if the remaining contents were correct, and if the delivered contents were correct.
There is no change delivered in this test.
As for the coming pull requests, I will add more to previous test classes, this class and look to add more test classes.

----

Fourth Pull Request Notes
10/17/2018

I started by creating a "helper" class called VMUtility that has specific methods designed return a list of each of 
the individual contents of the vending machine (Coins and drinks remaining in the vending machine or sent to the
delivery chute). This simplifies a lot of the methods needed to be called in the actual tests, and also helps me on
an organizational level. Since this is part of the test project this class will also be used for other test classes.

Then I created a new test class with starting with two tests using assert statements and to test 
correctness (as suggested). For this test class, I created two methods with assert statements to check correctness.
One regarding the vending machine's output (change, soda), and another checking the remaining contents inside the 
vending machine.

The first unit test checks if the correct approximate change is delivered (not enough coins in the vending machine
for exact change) as well as the drink. It also checks the remaining contents in the vending machines (coins, drinks).

The second unit test checks for the same output but expectss the correct exact change is delivered as the vending machine
now has enough coins.

-----

Third Pull Request Notes
10/10/2018
Took this week to start getting using to C# again. First created a new unit test project in visual studio.
The first group of unit tests will deal with creating and configuring the vending machine.
The testing class has been named "BadSetup". Began with writing two simple unit tests regarding the vending machine.
The first unit test checks if an invalid drink cost is caught by the exception handler.
The second unit test checks if the number of drink names and costs are equal to the number of selection buttons/soda can racks.


-----

Second Pull Request Notes
10/3/2018

Since I know how to use C# and this is a past assignment, going over this codebase isn't something new to me. 
However, there are many classes and it is difficult to understand every component of the entire system.
The assignment was given to us expecting us to be able to program the vending machine logic without understanding
the whole system. I will begin looking over the system and see if any changes are needed to
improve testability. I will also start writing unit tests in order to check if the vending machine logic is working
and if the vending machine contents are correct, as well as if appropriate exceptions are thrown.
